Problem 1
 
 
## for problem a
### red1 blue1 green1 download to desktop
 

## for problem b
import imageio
img_arr_red1=imageio.imread('/content/red1.jpg')
img_arr_red1.shape
 
import imageio
img_arr_blue1=imageio.imread('/content/blue1.png')
img_arr_blue1.shape
 
import imageio
img_arr_green1=imageio.imread('/content/green1.png')
img_arr_green1.shape
## for problem c
import numpy as np
import torch
#import library
 
 
img_red1 = torch.from_numpy(img_arr_red1)
#array transfer to tensor
 
img=img_red1.float()
# element transfer to float
 
mean_red1=torch.mean(img)
#nomalized input data
 
print(mean_red1)
## for problem c
import numpy as np
import torch
#import library
 
 
img_blue1 = torch.from_numpy(img_arr_blue1)
#array transfer to tensor
 
img=img_blue1.float()
# element transfer to float
 
mean_blue1=torch.mean(img)
#nomalized input data
 
print(mean_blue1)
## for problem c
import numpy as np
import torch
#import library
 
 
img_green1 = torch.from_numpy(img_arr_green1)
#array transfer to tensor
 
img=img_green1.float()
# element transfer to float
 
mean_green1=torch.mean(img)
#nomalized input data
 
print(mean_green1)


Problem2:


%matplotlib inline
import numpy as np
import torch
torch.set_printoptions(edgeitems=2, linewidth=75)
#import library
 
 
t_c = [0.5,  14.0, 15.0, 28.0, 11.0,  8.0,  3.0, -4.0,  6.0, 13.0, 21.0]
t_u = [35.7, 55.9, 58.2, 81.9, 56.3, 48.9, 33.9, 21.8, 48.4, 60.4, 68.4]
t_c = torch.tensor(t_c)
t_u = torch.tensor(t_u)
 
#import dataset
 
def model(t_u, w2,w1, b):
    t_p= w2 * t_u ** 2 + w1 * t_u + b
    return t_p
# define model
 
 
def loss_fn(t_p, t_c):
   squared_diffs = (t_p - t_c)**2
   return squared_diffs.mean()
# define loss function
 

w2 = torch.ones(())
w1 = torch.zeros(())
b = torch.zeros(())
 
t_p = model(t_u, w2,w1, b)
print(t_p)
# intinal prediction result
 
loss = loss_fn(t_p, t_c)
print(loss)
# intinal loss result
delta = 0.1
 
loss_rate_of_change_w2 = \
   (loss_fn(model(t_u, w2 + delta,w1, b), t_c) -
    loss_fn(model(t_u, w2 - delta,w1, b), t_c)) / (2.0 * delta)
learning_rate = 1e-2
 
w2 = w2 - learning_rate * loss_rate_of_change_w2
# how w2 change
loss_rate_of_change_w1 = \
   (loss_fn(model(t_u, w2, w1 + delta,b), t_c) -
    loss_fn(model(t_u, w2, w1 - delta,b), t_c)) / (2.0 * delta)
 
w1 = w1 - learning_rate * loss_rate_of_change_w1
# how w1 change
loss_rate_of_change_b = \
   (loss_fn(model(t_u, w2,w1, b + delta), t_c) -
    loss_fn(model(t_u, w2,w1, b - delta), t_c)) / (2.0 * delta)
 
b = b - learning_rate * loss_rate_of_change_b
# how b change
def dloss_fn(t_p, t_c):
   dsq_diffs = 2 * (t_p - t_c) / t_p.size(0)  # <1>
   return dsq_diffs
 
def dmodel_dw2(t_u, w2,w1, b):
   return 2* t_u
 
def dmodel_dw1(t_u, w2,w1, b):
   return t_u
 
def dmodel_db(t_u, w2,w1, b):
   return 1.0
def grad_fn(t_u, t_c, t_p, w2,w1, b):
   dloss_dtp = dloss_fn(t_p, t_c)
   dloss_dw2 = dloss_dtp * dmodel_dw2(t_u, w2,w1, b)
   dloss_dw1 = dloss_dtp * dmodel_dw1(t_u, w2,w1, b)
   dloss_db = dloss_dtp * dmodel_db(t_u, w2,w1, b)
   return torch.stack([dloss_dw2.sum(),dloss_dw1.sum(), dloss_db.sum()]) 
def training_loop(n_epochs, learning_rate, params, t_u, t_c):
   for epoch in range(1, n_epochs + 1):
       w2,w1,b = params
 
       t_p = model(t_u, w2,w1, b)  # <1>
       loss = loss_fn(t_p, t_c)
       grad = grad_fn(t_u, t_c, t_p, w2,w1, b)  # <2>
 
       params = params - learning_rate * grad
 
       print('Epoch %d, Loss %f' % (epoch, float(loss))) # <3>
       
   return params
def training_loop(n_epochs, learning_rate, params, t_u, t_c,
                 print_params=True):
   for epoch in range(1, n_epochs + 1):
       w2,w1, b = params
 
       t_p = model(t_u, w2,w1, b)  # <1>
       loss = loss_fn(t_p, t_c)
       grad = grad_fn(t_u, t_c, t_p, w2,w1, b)  # <2>
 
       params = params - learning_rate * grad
   
       if epoch in {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,500,1000,1500,2000,2500,3000,3500,4000,4500, 5000}:  # <3>
           print('Epoch %d, Loss %f' % (epoch, float(loss)))
           if print_params:
               print('    Params:', params)
               print('    Grad:  ', grad)   
      
          
   return params
t_un = 0.1 * t_u
training_loop(
   n_epochs = 5000,
   learning_rate = 0.1,
   params = torch.tensor([1.0, 0.0,0.0]),
   t_u = t_un,
   t_c = t_c)
 
training_loop(
   n_epochs = 5000,
   learning_rate = 0.01,
   params = torch.tensor([1.0, 0.0,0.0]),
   t_u = t_un,
   t_c = t_c)
training_loop(
   n_epochs = 5000,
   learning_rate = 0.001,
   params = torch.tensor([1.0, 0.0,0.0]),
   t_u = t_un,
   t_c = t_c)
training_loop(
   n_epochs = 5000,
   learning_rate = 0.0001,
   params = torch.tensor([1.0, 0.0,0.0]),
   t_u = t_un,
   t_c = t_c)
%matplotlib inline
from matplotlib import pyplot as plt
 
t_p = model(t_un, w2,w1, b)
fig = plt.figure(dpi=600)
plt.xlabel("Temperature (°Fahrenheit)")
plt.ylabel("Temperature (°Celsius)")
plt.plot(t_u.numpy(), t_p.detach().numpy())
plt.plot(t_u.numpy(), t_c.numpy(), 'o')
plt.savefig("temp_unknown_plot.png", format="png") 

Problem 3

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
 
housing=pd.DataFrame (pd.read_csv("/content/Housing.csv"))
housing.head()
m=len(housing)
m
housing.shape
num_vars=['area','bedrooms','bathrooms','stories','parking','price']
Newtrain=housing[num_vars]
Newtrain
area=housing['area']
bedrooms=housing['bedrooms']
bathrooms=housing['bathrooms']
stories=housing['stories']
parking=housing['parking']
price=housing['price']
 
%matplotlib inline
import numpy as np
import torch
torch.set_printoptions(edgeitems=2)
 
t_c1 = torch.tensor(area)
t_c2 = torch.tensor(bedrooms)
t_c3 = torch.tensor(bathrooms)
t_c4 = torch.tensor(stories)
t_c5 = torch.tensor(parking)
 
 
t_r = torch.tensor(price)
 
 
def model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return w1*t_c1+w2*t_c2+w3*t_c3+w4*t_c4+w5*t_c5 + b
 
def loss_fn(t_p, t_r):
   squared_diffs = (t_p - t_r)**2
   return squared_diffs.mean()
w1 = torch.ones(())
w2 = torch.ones(())
w3 = torch.ones(())
w4 = torch.ones(())
w5 = torch.ones(())
b = torch.zeros(())
 
t_p = model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
t_p
loss = loss_fn(t_p, t_r)
loss
delta = 0.1
 
loss_rate_of_change_w1 = \
   (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1+delta,w2,w3,w4,w5, b), t_r) -
    loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1-delta,w2,w3,w4,w5, b), t_r)) / (2.0 * delta)
learning_rate = 1e-2
 
w1 = w1 - learning_rate * loss_rate_of_change_w1
loss_rate_of_change_w2 = \
   (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2+delta,w3,w4,w5, b), t_r) -
    loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2-delta,w3,w4,w5, b), t_r)) / (2.0 * delta)
 
w2 = w2 - learning_rate * loss_rate_of_change_w2
loss_rate_of_change_w3 = \
   (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3+delta,w4,w5, b), t_r) -
    loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3-delta,w4,w5, b), t_r)) / (2.0 * delta)
 
w3 = w3 - learning_rate * loss_rate_of_change_w3
loss_rate_of_change_w4 = \
   (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4+delta,w5, b), t_r) -
    loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4-delta,w5, b), t_r)) / (2.0 * delta)
 
w4 = w4 - learning_rate * loss_rate_of_change_w4
loss_rate_of_change_w5 = \
   (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5+delta, b), t_r) -
    loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5-delta, b), t_r)) / (2.0 * delta)
 
w5 = w5 - learning_rate * loss_rate_of_change_w5
loss_rate_of_change_b = (loss_fn(model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b+delta), t_r) - loss_fn(model(t_c1, t_c2, t_c3, t_c4, t_c5, w1,w2,w3,w4,w5, b-delta), t_r)) / (2.0 * delta)
b = b - learning_rate * loss_rate_of_change_b
def dloss_fn(t_p, t_r):
   dsq_diffs = 2 * (t_p - t_r) / t_p.size(0)  # <1>
   return dsq_diffs
 
def dmodel_dw1(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return t_c1
def dmodel_dw2(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return t_c2
def dmodel_dw3(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return t_c3
def dmodel_dw4(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return t_c4
def dmodel_dw5(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return t_c5
def dmodel_db(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b):
   return 1.0
 
def grad_fn(t_r, t_c1,t_c2,t_c3,t_c4,t_c5, t_p, w1,w2,w3,w4,w5, b):
   dloss_dtp = dloss_fn(t_p, t_r)
   dloss_dw1 = dloss_dtp * dmodel_dw1(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   dloss_dw2 = dloss_dtp * dmodel_dw2(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   dloss_dw3 = dloss_dtp * dmodel_dw3(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   dloss_dw4 = dloss_dtp * dmodel_dw4(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   dloss_dw5 = dloss_dtp * dmodel_dw5(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   dloss_db = dloss_dtp * dmodel_db(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
   return torch.stack([dloss_dw1.sum(),dloss_dw2.sum(),dloss_dw3.sum(),dloss_dw4.sum(),dloss_dw5.sum(), dloss_db.sum()])

def training_loop(n_epochs, learning_rate, params, t_r, t_c1,t_c2,t_c3,t_c4,t_c5):

   for epoch in range(1, n_epochs + 1):
       w1,w2,w3,w4,w5,b = params

       t_p = model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b) 
       loss = loss_fn(t_p, t_r)
       grad = grad_fn(t_c1,t_c2,t_c3,t_c4,t_c5, t_r, t_p, w1,w2,w3,w4,w5,b) 

       params = params - learning_rate * grad

       print('Epoch %d, Loss %f' % (epoch, float(loss))) # <3>
          
   return params

def training_loop(n_epochs, learning_rate, params, t_r, t_c1,t_c2,t_c3,t_c4,t_c5,
                 print_params=True):
   for epoch in range(1, n_epochs + 1):
       w1,w2,w3,w4,w5,b = params

       t_p = model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
       loss = loss_fn(t_p, t_r)
       grad =  grad_fn(t_c1,t_c2,t_c3,t_c4,t_c5, t_r, t_p, w1,w2,w3,w4,w5,b)

       params = params - learning_rate * grad

       if epoch in {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,500,1000,1500,2000,2500,3000,3500,4000,4500, 5000}:  # <3>
           print('Epoch %d, Loss %f' % (epoch, float(loss)))
           if print_params:
               print('    Params:', params)
               print('    Grad:  ', grad)
           
   return params
t_un = 0.1 * t_u
training_loop(
   n_epochs = 5000,
   learning_rate = 0.1,
   params = torch.tensor([1.0, 1.0,1.0,1.0,1.0,0.0]),
   t_r = t_r,
   t_c1 = 0.1*t_c1,
   t_c2 = 0.1*t_c2,
   t_c3 = 0.1*t_c3,
   t_c4 = 0.1*t_c4,
   t_c5 = 0.1*t_c5)
training_loop(
   n_epochs = 5000,
   learning_rate = 0.01,
   params = torch.tensor([1.0, 1.0,1.0,1.0,1.0,0.0]),
   t_r = t_r,
   t_c1 = 0.1*t_c1,
   t_c2 = 0.1*t_c2,
   t_c3 = 0.1*t_c3,
   t_c4 = 0.1*t_c4,
   t_c5 = 0.1*t_c5)
training_loop(
   n_epochs = 5000,
   learning_rate = 0.001,
   params = torch.tensor([1.0, 1.0,1.0,1.0,1.0,0.0]),
   t_r = t_r,
   t_c1 = 0.1*t_c1,
   t_c2 = 0.1*t_c2,
   t_c3 = 0.1*t_c3,
   t_c4 = 0.1*t_c4,
   t_c5 = 0.1*t_c5)
 

training_loop(
   n_epochs = 5000,
   learning_rate = 0.0001,
   params = torch.tensor([1.0, 1.0,1.0,1.0,1.0,0.0]),
   t_r = t_r,
   t_c1 = 0.1*t_c1,
   t_c2 = 0.1*t_c2,
   t_c3 = 0.1*t_c3,
   t_c4 = 0.1*t_c4,
   t_c5 = 0.1*t_c5)
%matplotlib inline
from matplotlib import pyplot as plt
 
t_p = model(t_c1,t_c2,t_c3,t_c4,t_c5, w1,w2,w3,w4,w5, b)
fig = plt.figure(dpi=600)
plt.xlabel("Temperature (°Fahrenheit)")
plt.ylabel("Temperature (°Celsius)")
plt.plot(t_c1.numpy(), t_p.detach().numpy())
plt.plot(t_c1.numpy(), t_r.numpy(), 'o')
plt.savefig("temp_unknown_plot.png", format="png") 

