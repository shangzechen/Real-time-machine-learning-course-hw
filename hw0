###################################################  Problem 1 ###############################################################################################################
from torchvision import models
dir(models)
alexnet = models.AlexNet()
resnet = models.resnet101(pretrained=True)
Resnet
from torchvision import transforms
preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]
        )])
from PIL import Image
img = Image.open(r"C:\Users\shangzechen\Desktop\Deeplearning\hw0\hw0pro1pic5.jpg")
Img
img_t = preprocess(img)
 
import torch
batch_t = torch.unsqueeze(img_t, 0)
 
resnet.eval()
 
out = resnet(batch_t)
 
with open(r'C:\Users\shangzechen\Desktop\Deeplearning\hw0\hw0pro1.txt') as f:
    labels = [line.strip() for line in f.readlines()]
 
_, index = torch.max(out, 1)
 
percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100
labels[index[0]], percentage[index[0]].item()    
 
_, indices = torch.sort(out, descending=True)
[(labels[idx], percentage[idx].item()) for idx in indices[0][:5]]
###################################################  Problem 2 ###############################################################################################################
import torch
import torch.nn as nn
class ResNetBlock(nn.Module): # <1>
 
    def __init__(self, dim):
        super(ResNetBlock, self).__init__()
        self.conv_block = self.build_conv_block(dim)
 
    def build_conv_block(self, dim):
        conv_block = []
 
        conv_block += [nn.ReflectionPad2d(1)]
 
        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=0, bias=True),
                       nn.InstanceNorm2d(dim),
                       nn.ReLU(True)]
 
        conv_block += [nn.ReflectionPad2d(1)]
 
        conv_block += [nn.Conv2d(dim, dim, kernel_size=3, padding=0, bias=True),
                       nn.InstanceNorm2d(dim)]
 
        return nn.Sequential(*conv_block)
 
    def forward(self, x):
        out = x + self.conv_block(x) # <2>
        return out
 
 
class ResNetGenerator(nn.Module):
 
    def __init__(self, input_nc=3, output_nc=3, ngf=64, n_blocks=9): # <3> 
 
        assert(n_blocks >= 0)
        super(ResNetGenerator, self).__init__()
 
        self.input_nc = input_nc
        self.output_nc = output_nc
        self.ngf = ngf
 
        model = [nn.ReflectionPad2d(3),
                 nn.Conv2d(input_nc, ngf, kernel_size=7, padding=0, bias=True),
                 nn.InstanceNorm2d(ngf),
                 nn.ReLU(True)]
 
        n_downsampling = 2
        for i in range(n_downsampling):
            mult = 2**i
            model += [nn.Conv2d(ngf * mult, ngf * mult * 2, kernel_size=3,
                                stride=2, padding=1, bias=True),
                      nn.InstanceNorm2d(ngf * mult * 2),
                      nn.ReLU(True)]
 
        mult = 2**n_downsampling
        for i in range(n_blocks):
            model += [ResNetBlock(ngf * mult)]
 
        for i in range(n_downsampling):
            mult = 2**(n_downsampling - i)
            model += [nn.ConvTranspose2d(ngf * mult, int(ngf * mult / 2),
                                         kernel_size=3, stride=2,
                                         padding=1, output_padding=1,
                                         bias=True),
                      nn.InstanceNorm2d(int(ngf * mult / 2)),
                      nn.ReLU(True)]
 
        model += [nn.ReflectionPad2d(3)]
        model += [nn.Conv2d(ngf, output_nc, kernel_size=7, padding=0)]
        model += [nn.Tanh()]
 
        self.model = nn.Sequential(*model)
 
    def forward(self, input): # <3>
        return self.model(input)
netG = ResNetGenerator()
model_path = 'C:/Users/shangzechen/Desktop/Deeplearning/hw0/horse2zebra_0.4.0.pth'
model_data = torch.load(model_path)
netG.load_state_dict(model_data)
netG.eval()
from PIL import Image
from torchvision import transforms
preprocess = transforms.Compose([transforms.Resize(256),
                                 transforms.ToTensor()])
img = Image.open(r"C:\Users\shangzechen\Desktop\Deeplearning\hw0\hw0pro2pic7.jpg")
Img
img_t = preprocess(img)
batch_t = torch.unsqueeze(img_t, 0)
batch_out = netG(batch_t)
out_t = (batch_out.data.squeeze() + 1.0) / 2.0
out_img = transforms.ToPILImage()(out_t)
out_img.save(r"C:\Users\shangzechen\Desktop\Deeplearning\hw0\hw0pro2pic7output.jpg")
out_img
###################################################  Problem 3 ###############################################################################################################
# Based on code 1 and code 2 add:
macs, params = get_model_complexity_info(netG, (3, 224, 224), as_strings=True,
                                           print_per_layer_stat=True, verbose=True)
print('{:<30}  {:<8}'.format('Computational complexity: ', macs))
print('{:<30}  {:<8}'.format('Number of parameters: ', params))
###################################################  Problem 4 ###############################################################################################################
import torch
model = torch.hub.load('pytorch/vision:v0.10.0', 'mobilenet_v2', pretrained=True
model.eval()
pip install --upgrade git+https://github.com/sovrasov/flops-counter.pytorch.git
from ptflops import get_model_complexity_info
from PIL import Image
from torchvision import transforms
input_image = Image.open(r"/content/hw0pro1pic5.jpg")
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
input_tensor = preprocess(input_image)
input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model
# move the input and model to GPU for speed if available
if torch.cuda.is_available():
    input_batch = input_batch.to('cuda')
    model.to('cuda')
with torch.no_grad():
    output = model(input_batch)
# Tensor of shape 1000, with confidence scores over Imagenet's 1000 classes
print(output[0])
# The output has unnormalized scores. To get probabilities, you can run a softmax on it.
probabilities = torch.nn.functional.softmax(output[0], dim=0)
print(probabilities)
# Download ImageNet labels
!wget https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt
# Read the categories
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]
# Show top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
macs, params = get_model_complexity_info(model, (3, 224, 224), as_strings=True,
                                           print_per_layer_stat=True, verbose=True)
print('{:<30}  {:<8}'.format('Computational complexity: ', macs))
print('{:<30}  {:<8}'.format('Number of parameters: ', params))
